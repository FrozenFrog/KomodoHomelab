[[server]]
name = "HomeLab"
[server.config]
address = "https://host.docker.internal:8120"
region = "Vietnam"
enabled = true

##

[[stack]]
name = "adguard-home"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/BackboneSystems"
file_paths = ["adguard_home.yaml"]
env_file_path = "adguardhome.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
APP_CONFIG_PATH=adguardhome-config
"""

##

[[stack]]
name = "cloudflared"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/BackboneSystems"
file_paths = ["cloudflared.yaml"]
env_file_path = "cloudflared.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
APP_CONFIG_PATH=cloudflared-config
"""

##

[[stack]]
name = "database"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/Database"
file_paths = [
  "mariadb.yaml",
  "mongodb.yaml",
  "mysql.yaml",
  "postgres.yaml",
  "redis.yaml"
]
env_file_path = "database.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
MONGO_INITDB_ROOT_PASSWORD=mongodb
MONGO_INITDB_ROOT_USERNAME=mongodb
MONGODB_CONFIG_PATH=mongodb-config
MYSQL_ROOT_PASSWORD=mysql
MYSQL_CONFIG_PATH=mysql-config
MARIADB_ROOT_PASSWORD=mariadb
MARIADB_CONFIG_PATH=mariadb-config
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_CONFIG_PATH=postgresql-config
"""

##

[[stack]]
name = "godoxy"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/BackboneSystems"
file_paths = ["godoxy.yaml"]
env_file_path = "godoxy.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
# docker image tag (latest, nightly)
TAG=latest
APP_CONFIG_PATH=godoxy-config
# container uid and gid (must match the owner of mounted directories)
GODOXY_UID=1000
GODOXY_GID=1000

# Set GODOXY_API_JWT_SECURE=false to allow http
GODOXY_API_JWT_SECURE=true
# API JWT Configuration (common)
# generate secret with `openssl rand -base64 32`
GODOXY_API_JWT_SECRET=ee3dc562a8a033aceafc184c01dfcc395b637962657274726f6e
# the JWT token time-to-live
# leave empty to use default (24 hours)
# format: https://pkg.go.dev/time#Duration
GODOXY_API_JWT_TOKEN_TTL=

# API/WebUI user password login credentials (optional)
# These fields are not required for OIDC authentication
GODOXY_API_USER=mahdi
GODOXY_API_PASSWORD=quadong

# OIDC Configuration (optional)
# Uncomment and configure these values to enable OIDC authentication.
#
# GODOXY_OIDC_ISSUER_URL=https://accounts.google.com
# GODOXY_OIDC_CLIENT_ID=your-client-id
# GODOXY_OIDC_CLIENT_SECRET=your-client-secret
# GODOXY_OIDC_SCOPES=openid, profile, email, groups # you may also include `offline_access` if your Idp supports it (e.g. Authentik, Pocket ID)
#
# User definitions: Uncomment and configure these values to restrict access to specific users or groups.
# These two fields act as a logical AND operator. For example, given the following membership:
#   user1, group1
#   user2, group1
#   user3, group2
#   user1, group2
# You can allow access to user3 AND all users of group1 by providing:
#   # GODOXY_OIDC_ALLOWED_USERS=user3
#   # GODOXY_OIDC_ALLOWED_GROUPS=group1
#
# Comma-separated list of allowed users.
# GODOXY_OIDC_ALLOWED_USERS=user1,user2
# Optional: Comma-separated list of allowed groups.
# GODOXY_OIDC_ALLOWED_GROUPS=group1,group2

# Proxy listening address
GODOXY_HTTP_ADDR=:80
GODOXY_HTTPS_ADDR=:443

# Enable HTTP3
GODOXY_HTTP3_ENABLED=true

# API listening address
GODOXY_API_ADDR=192.168.1.3:8888

# Metrics
GODOXY_METRICS_DISABLE_CPU=false
GODOXY_METRICS_DISABLE_MEMORY=false
GODOXY_METRICS_DISABLE_DISK=false
GODOXY_METRICS_DISABLE_NETWORK=false
GODOXY_METRICS_DISABLE_SENSORS=false

# Frontend listening port
GODOXY_FRONTEND_PORT=3001

# Frontend aliases (subdomains / FQDNs, e.g. godoxy, godoxy.domain.com)
GODOXY_FRONTEND_ALIASES=godoxy

# Docker socket
# /var/run/podman/podman.sock for podman
DOCKER_SOCKET=/var/run/docker.sock
SOCKET_PROXY_LISTEN_ADDR=192.168.1.3:2375

# Debug mode
GODOXY_DEBUG=false
"""

##

[[stack]]
name = "home-automation"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/HomeAutomation"
file_paths = [
  "homebridge.yaml",
  "shinobi.yaml"
]
env_file_path = "HomeAutomation.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
HOMEBRIDGE_CONFIG_PATH=homebridge-config
SHINOBI_CONFIG_PATH=shinobi-config
DB_HOST=192.168.1.3
DB_USER=majesticflame
DB_PASSWORD=
DB_DATABASE=ccio
"""

##

[[stack]]
name = "homepage"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/BackboneSystems"
file_paths = ["gethomepage.yaml"]
env_file_path = "gethomepage.env"
additional_env_files = ["../../MainSystem/.env"]
environment = """
APP_CONFIG_PATH=gethomepage-config
"""

##

[[stack]]
name = "karakeep"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/Karakeep"
additional_env_files = ["../../MainSystem/.env"]
environment = """
MEILI_MASTER_KEY = [[ask-tick-any-gavel]]
NEXTAUTH_SECRET = [[storming-flapping-topped-maris]]
"""

##

[[stack]]
name = "syncing-center"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/Syncing"
additional_env_files = ["../../MainSystem/.env"]
environment = """
ALIST_CONFIG_PATH=alist-config
RClONE_CONFIG_PATH=rclone-config
INFUSE_MEDIA_STORAGE_PATH=/mnt/Data/Infuse/media
APPLICATION_STORAGE_PATH=/mnt/Application/Downloads
MISC_STORAGE_PATH=/mnt/Storage
"""

##

[[stack]]
name = "template"
template = true
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks"
additional_env_files = ["../../MainSystem/.env"]

##

[[stack]]
name = "vaultwarden"
[stack.config]
server = "HomeLab"
poll_for_updates = true
auto_update = true
auto_update_all_services = true
linked_repo = "Komodo-Github"
run_directory = "stacks/Vaultwarden"
additional_env_files = ["../../MainSystem/.env"]
environment = """
APP_CONFIG_PATH=vaultwarden-config
"""

##

[[repo]]
name = "Komodo-Github"
[repo.config]
server = "HomeLab"
builder = "Local"
git_account = "FrozenFrog"
repo = "FrozenFrog/KomodoHomelab"

##

[[procedure]]
name = "Backup Core Database"
description = "Triggers the Core database backup at the scheduled time."
tags = ["system"]
config.schedule = "Every day at 23:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "BackupCoreDatabase", execution.params = {}, enabled = true }
]

##

[[procedure]]
name = "Global Auto Update"
description = "Pulls and auto updates Stacks and Deployments using 'poll_for_updates' or 'auto_update'."
tags = ["system"]
config.schedule = "Every day at 23:00"

[[procedure.config.stage]]
name = "Stage 1"
enabled = true
executions = [
  { execution.type = "GlobalAutoUpdate", execution.params = {}, enabled = true }
]

##

[[alerter]]
name = "Alert"
[alerter.config]


##

[[builder]]
name = "Local"
[builder.config]
type = "Server"
params.server_id = "HomeLab"

##

[[resource_sync]]
name = "sync-stack"
[resource_sync.config]
repo = "FrozenFrog/KomodoHomelab"
git_account = "FrozenFrog"
resource_path = ["MainSystem/komodo.toml"]
managed = true
delete = true

##

[[resource_sync]]
name = "sync-vars"
[resource_sync.config]
repo = "FrozenFrog/KomodoHomelab"
git_account = "FrozenFrog"
resource_path = ["MainSystem/variable.toml"]
managed = true
delete = true
include_resources = false
include_variables = true